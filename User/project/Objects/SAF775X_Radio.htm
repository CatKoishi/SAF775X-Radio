<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\SAF775X_Radio.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\SAF775X_Radio.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6210000: Last Updated: Thu Aug  1 16:57:12 2024
<BR><P>
<H3>Maximum Stack Usage =       1112 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; MenuMain &rArr; MenuAudio &rArr; UI_Audio &rArr; UI_DrawEq &rArr; UI_DrawEqBand &rArr; GUI_Float &rArr; GUI_Number &rArr; GUI_Char &rArr; GUI_DrawBuff &rArr; GUI_DrawDot
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[39]">ADC2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[39]">ADC2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC0_1_IRQHandler</a> from gd32f30x_it.o(.text.ADC0_1_IRQHandler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[39]">ADC2_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from gd32f30x_it.o(.text.BusFault_Handler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[20]">CAN0_EWMC_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[1f]">CAN0_RX1_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[15]">DMA0_Channel0_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[16]">DMA0_Channel1_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[17]">DMA0_Channel2_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[18]">DMA0_Channel3_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[19]">DMA0_Channel4_IRQHandler</a> from gd32f30x_it.o(.text.DMA0_Channel4_IRQHandler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[1a]">DMA0_Channel5_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[1b]">DMA0_Channel6_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[42]">DMA1_Channel0_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[43]">DMA1_Channel1_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[44]">DMA1_Channel2_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[45]">DMA1_Channel3_4_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from gd32f30x_it.o(.text.DebugMon_Handler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[3a]">EXMC_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[32]">EXTI10_15_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[21]">EXTI5_9_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[e]">FMC_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from gd32f30x_it.o(.text.HardFault_Handler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[2a]">I2C0_ER_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[29]">I2C0_EV_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[2c]">I2C1_ER_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[2b]">I2C1_EV_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[b]">LVD_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from gd32f30x_it.o(.text.MemManage_Handler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from gd32f30x_it.o(.text.NMI_Handler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from gd32f30x_it.o(.text.PendSV_Handler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[f]">RCU_CTC_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[33]">RTC_Alarm_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from gd32f30x_it.o(.text.RTC_IRQHandler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[3b]">SDIO_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[2d]">SPI0_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[2e]">SPI1_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[3d]">SPI2_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from gd32f30x_it.o(.text.SVC_Handler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from gd32f30x_it.o(.text.SysTick_Handler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[47]">SystemInit</a> from system_gd32f30x.o(.text.SystemInit) referenced from startup_gd32f30x_hd.o(.text)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[22]">TIMER0_BRK_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[25]">TIMER0_Channel_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[24]">TIMER0_TRG_CMT_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[23]">TIMER0_UP_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[26]">TIMER1_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[27]">TIMER2_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[28]">TIMER3_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[3c]">TIMER4_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[40]">TIMER5_IRQHandler</a> from gd32f30x_it.o(.text.TIMER5_IRQHandler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[41]">TIMER6_IRQHandler</a> from gd32f30x_it.o(.text.TIMER6_IRQHandler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[35]">TIMER7_BRK_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[38]">TIMER7_Channel_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[37]">TIMER7_TRG_CMT_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[36]">TIMER7_UP_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[3e]">UART3_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[3f]">UART4_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[2f]">USART0_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[30]">USART1_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[31]">USART2_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[1d]">USBD_HP_CAN0_TX_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[1e]">USBD_LP_CAN0_RX0_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[34]">USBD_WKUP_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from gd32f30x_it.o(.text.UsageFault_Handler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[a]">WWDGT_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[48]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_gd32f30x_hd.o(.text)
 <LI><a href="#[49]">fputc</a> from main.o(.text.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[46]">main</a> from main.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[48]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(.text)
</UL>
<P><STRONG><a name="[1a0]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[4a]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[5d]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1a1]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[1a2]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[1a3]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[1a4]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[1a5]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>ADC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN0_EWMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN0_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA0_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA0_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA0_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA0_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA0_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA0_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA1_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA1_Channel3_4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>EXMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI10_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI5_9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C0_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C0_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>LVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCU_CTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIMER0_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIMER0_Channel_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIMER0_TRG_CMT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIMER0_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIMER4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIMER7_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIMER7_Channel_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIMER7_TRG_CMT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIMER7_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USBD_HP_CAN0_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USBD_LP_CAN0_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBD_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDGT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Callback
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initGraphicSA
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSignalScaler
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setUltraBassGain
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTone
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setGraphicEQ
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setDCFilter
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMainVol
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuAudio
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_OutVal
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>

<P><STRONG><a name="[51]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initGraphicSA
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTone
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setGraphicEQ
</UL>

<P><STRONG><a name="[52]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[53]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Callback
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initQPD
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initGraphicSA
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTone
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setGraphicEQ
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setDCFilter
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuAudio
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_OutVal
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVolume
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataConv
</UL>

<P><STRONG><a name="[54]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Callback
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initQPD
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initGraphicSA
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSignalScaler
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setUltraBassGain
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTone
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setGraphicEQ
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setDCFilter
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBalance
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMainVol
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setGraphicSAGain
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setGraphicEQPreScal
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTonePreScal
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setFader
</UL>

<P><STRONG><a name="[189]"></a>__aeabi_dcmple</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, dcmple.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_dcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setDCFilter
</UL>

<P><STRONG><a name="[188]"></a>__aeabi_dcmplt</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, dcmplt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_dcmplt
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setDCFilter
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMainVol
</UL>

<P><STRONG><a name="[187]"></a>__aeabi_dcmpge</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, dcmpge.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_dcmpge
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBalance
</UL>

<P><STRONG><a name="[55]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTone
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuAudio
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_OutVal
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVolume
</UL>

<P><STRONG><a name="[56]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Callback
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_OutVal
</UL>

<P><STRONG><a name="[65]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Callback
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initQPD
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initGraphicSA
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSignalScaler
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setUltraBassGain
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTone
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setGraphicEQ
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setDCFilter
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBalance
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMainVol
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuAudio
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setGraphicSAGain
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setGraphicEQPreScal
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTonePreScal
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataConv
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setFader
</UL>

<P><STRONG><a name="[58]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Callback
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initQPD
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initGraphicSA
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSignalScaler
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setUltraBassGain
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTone
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setGraphicEQ
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setDCFilter
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBalance
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMainVol
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuAudio
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVolume
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setGraphicSAGain
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setGraphicEQPreScal
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTonePreScal
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataConv
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setFader
</UL>

<P><STRONG><a name="[1a6]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[19f]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[5a]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[4d]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[1a7]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[57]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[1a8]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[4e]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[1a9]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[1aa]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[59]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
</UL>

<P><STRONG><a name="[1ab]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[5b]"></a>_frnd</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, frnd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _frnd
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_roundf
</UL>

<P><STRONG><a name="[50]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[4f]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>

<P><STRONG><a name="[5c]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[19c]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1ac]"></a>__fp_status</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fpstat.o(.text), UNUSED)

<P><STRONG><a name="[195]"></a>__ieee_status</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fpstat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>

<P><STRONG><a name="[4b]"></a>__scatterload</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1ad]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[1c]"></a>ADC0_1_IRQHandler</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, gd32f30x_it.o(.text.ADC0_1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ADC0_1_IRQHandler &rArr; ADC_Callback &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_interrupt_flag_get
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>ADC_Callback</STRONG> (Thumb, 648 bytes, Stack size 32 bytes, main.o(.text.ADC_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ADC_Callback &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_bit_get
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_interrupt_flag_clear
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_inserted_data_read
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_regular_data_read
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myround
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Handler
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_1_IRQHandler
</UL>

<P><STRONG><a name="[68]"></a>ADC_Init</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, init.o(.text.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ADC_Init &rArr; adc_deinit &rArr; rcu_periph_reset_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_interrupt_enable
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_interrupt_flag_clear
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_external_trigger_source_config
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_external_trigger_config
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_inserted_channel_config
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_regular_channel_config
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_channel_length_config
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_data_alignment_config
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_special_function_config
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_mode_config
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_tempsensor_vrefint_enable
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_calibration_enable
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_enable
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_deinit
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[78]"></a>AddChannel</STRONG> (Thumb, 574 bytes, Stack size 16 bytes, main.o(.text.AddChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = AddChannel &rArr; saveChannels &rArr; flash_program_page &rArr; flash_waitBusy &rArr; flash_readStatueReg &rArr; flash_readWriteByte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveChannels
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7a]"></a>AdjustFilter</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, main.o(.text.AdjustFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = AdjustFilter &rArr; SetFilter &rArr; SetTuner &rArr; Set_REG &rArr; I2C_Start &rArr; I2C_WriteByte &rArr; gpio_input_bit_get
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFilter
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inRangeInt
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7d]"></a>AdjustFreq</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, main.o(.text.AdjustFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = AdjustFreq &rArr; TuneFreq &rArr; Set_REG &rArr; I2C_Start &rArr; I2C_WriteByte &rArr; gpio_input_bit_get
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDS_Refresh
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TuneFreq
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inRangeInt
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[80]"></a>AdjustVolume</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, main.o(.text.AdjustVolume))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = AdjustVolume &rArr; SetVolume &rArr; setFader &rArr; dataConv &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVolume
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inRangeInt
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VolumeHandler
</UL>

<P><STRONG><a name="[82]"></a>BootDirana3</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, saf775x.o(.text.BootDirana3))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = BootDirana3 &rArr; DSP_WRITE_DATA &rArr; I2C_Transmit &rArr; I2C_Start &rArr; I2C_WriteByte &rArr; gpio_input_bit_get
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_WRITE_DATA
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunerInit
</UL>

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f30x_it.o(.text.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>DAC_GetValue</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, func.o(.text.DAC_GetValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DAC_GetValue &rArr; dac_output_value_get
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_output_value_get
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Callback
</UL>

<P><STRONG><a name="[87]"></a>DAC_Init</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, init.o(.text.DAC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = DAC_Init &rArr; dac_deinit &rArr; rcu_periph_reset_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_wave_mode_config
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_trigger_source_config
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_trigger_enable
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_output_buffer_disable
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_disable
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8e]"></a>DAC_OutVal</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, func.o(.text.DAC_OutVal))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = DAC_OutVal &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_software_trigger_enable
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_data_set
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inRangeInt
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Callback
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuDisplay
</UL>

<P><STRONG><a name="[19]"></a>DMA0_Channel4_IRQHandler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, gd32f30x_it.o(.text.DMA0_Channel4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DMA0_Channel4_IRQHandler &rArr; dma_interrupt_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_interrupt_flag_clear
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_interrupt_flag_get
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_dma_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>DSP_WRITE_DATA</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, saf775x.o(.text.DSP_WRITE_DATA))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = DSP_WRITE_DATA &rArr; I2C_Transmit &rArr; I2C_Start &rArr; I2C_WriteByte &rArr; gpio_input_bit_get
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Transmit
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootDirana3
</UL>

<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f30x_it.o(.text.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[96]"></a>DecodeRDS</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, rds.o(.text.DecodeRDS))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = DecodeRDS &rArr; ReadPI &rArr; FindMin
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckError
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRT
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPS
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPI
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckGroupType
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRDS
</UL>

<P><STRONG><a name="[9c]"></a>DispContrast</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, lcd.o(.text.DispContrast))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = DispContrast &rArr; lcd_write_cmd &rArr; gpio_bit_write
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuDisplay
</UL>

<P><STRONG><a name="[9e]"></a>DispFill</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, lcd.o(.text.DispFill))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = DispFill &rArr; lcd_set_window &rArr; lcd_write_cmd &rArr; gpio_bit_write
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_window
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_multi_repeat
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[a1]"></a>DispGreyLevel</STRONG> (Thumb, 110 bytes, Stack size 80 bytes, lcd.o(.text.DispGreyLevel))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = DispGreyLevel &rArr; lcd_write_cmd &rArr; gpio_bit_write
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuDisplay
</UL>

<P><STRONG><a name="[a2]"></a>DispInverse</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lcd.o(.text.DispInverse))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = DispInverse &rArr; lcd_write_cmd &rArr; gpio_bit_write
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuDisplay
</UL>

<P><STRONG><a name="[a3]"></a>DispPixelOn</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lcd.o(.text.DispPixelOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = DispPixelOn &rArr; lcd_write_cmd &rArr; gpio_bit_write
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[a4]"></a>EasyProgramUpdateCoeff</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, dirana3basicdsp.o(.text.EasyProgramUpdateCoeff))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = EasyProgramUpdateCoeff &rArr; WaitEasyProgram &rArr; Get_ADSP &rArr; I2C_Restart &rArr; I2C_Start &rArr; I2C_WriteByte &rArr; gpio_input_bit_get
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitEasyProgram
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_ADSP_multi
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_ADSP
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initQPD
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initGraphicSA
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTone
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setGraphicEQ
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setDCFilter
</UL>

<P><STRONG><a name="[10d]"></a>FindMin</STRONG> (Thumb, 90 bytes, Stack size 12 bytes, rds.o(.text.FindMin))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FindMin
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPI
</UL>

<P><STRONG><a name="[a8]"></a>GPIO_Init</STRONG> (Thumb, 254 bytes, Stack size 40 bytes, init.o(.text.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = GPIO_Init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_pin_remap_config
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ab]"></a>GUI_Char</STRONG> (Thumb, 202 bytes, Stack size 56 bytes, lcd.o(.text.GUI_Char))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = GUI_Char &rArr; GUI_DrawBuff &rArr; GUI_DrawDot
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBuff
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Float
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Number
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_DrawScrollBar
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Device
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Text
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Main
</UL>

<P><STRONG><a name="[ad]"></a>GUI_ClearBuff</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, lcd.o(.text.GUI_ClearBuff))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GUI_ClearBuff &rArr; GUI_WriteXY
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_WriteXY
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Menu
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_About
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Device
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Search
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Radio
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Audio
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Display
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Main
</UL>

<P><STRONG><a name="[ac]"></a>GUI_DrawBuff</STRONG> (Thumb, 498 bytes, Stack size 56 bytes, lcd.o(.text.GUI_DrawBuff))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GUI_DrawBuff &rArr; GUI_DrawDot
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawDot
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_WriteXY
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_DrawTextBox
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_DrawValueBox
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_DrawCheckBox
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Char
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Menu
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_About
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Audio
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Main
</UL>

<P><STRONG><a name="[b0]"></a>GUI_DrawBuff_Origin</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, lcd.o(.text.GUI_DrawBuff_Origin))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GUI_DrawBuff_Origin &rArr; GUI_WriteXY
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_WriteXY
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Audio
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Main
</UL>

<P><STRONG><a name="[af]"></a>GUI_DrawDot</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, lcd.o(.text.GUI_DrawDot))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GUI_DrawDot
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBuff
</UL>

<P><STRONG><a name="[b1]"></a>GUI_FillBuff</STRONG> (Thumb, 522 bytes, Stack size 32 bytes, lcd.o(.text.GUI_FillBuff))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GUI_FillBuff &rArr; GUI_WriteXY
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_WriteXY
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_DrawToneBar
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_DrawEqBand
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_DrawOneGSA
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_DrawTextBox
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_DrawValueBox
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_DrawCheckBox
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_DrawFloat
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_DrawValue
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_DrawSelectBar
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Line_VH
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Display
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SeekALL
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Main
</UL>

<P><STRONG><a name="[b2]"></a>GUI_FillBuff_Origin</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, lcd.o(.text.GUI_FillBuff_Origin))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GUI_FillBuff_Origin &rArr; GUI_WriteXY
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_WriteXY
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Main
</UL>

<P><STRONG><a name="[b3]"></a>GUI_Float</STRONG> (Thumb, 446 bytes, Stack size 64 bytes, lcd.o(.text.GUI_Float))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = GUI_Float &rArr; GUI_Number &rArr; GUI_Char &rArr; GUI_DrawBuff &rArr; GUI_DrawDot
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Number
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Char
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_DrawEqBand
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_DrawFloat
</UL>

<P><STRONG><a name="[b5]"></a>GUI_Line_VH</STRONG> (Thumb, 238 bytes, Stack size 24 bytes, lcd.o(.text.GUI_Line_VH))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GUI_Line_VH &rArr; GUI_FillBuff &rArr; GUI_WriteXY
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillBuff
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_DrawEqBand
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Rectangle
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_DrawScrollBar
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Menu
</UL>

<P><STRONG><a name="[b4]"></a>GUI_Number</STRONG> (Thumb, 550 bytes, Stack size 48 bytes, lcd.o(.text.GUI_Number))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = GUI_Number &rArr; GUI_Char &rArr; GUI_DrawBuff &rArr; GUI_DrawDot
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Char
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_DrawEqBand
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_DrawValueBox
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Float
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_DrawValue
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Device
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SeekALL
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Main
</UL>

<P><STRONG><a name="[b6]"></a>GUI_Rectangle</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, lcd.o(.text.GUI_Rectangle))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = GUI_Rectangle &rArr; GUI_Line_VH &rArr; GUI_FillBuff &rArr; GUI_WriteXY
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Line_VH
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_DrawCheckBox
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Search
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Display
</UL>

<P><STRONG><a name="[b7]"></a>GUI_SeekALL</STRONG> (Thumb, 248 bytes, Stack size 40 bytes, ui.o(.text.GUI_SeekALL))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = GUI_SeekALL &rArr; GUI_Number &rArr; GUI_Char &rArr; GUI_DrawBuff &rArr; GUI_DrawDot
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Number
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillBuff
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchAllCH
</UL>

<P><STRONG><a name="[b8]"></a>GUI_Text</STRONG> (Thumb, 356 bytes, Stack size 40 bytes, lcd.o(.text.GUI_Text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = GUI_Text &rArr; GUI_Char &rArr; GUI_DrawBuff &rArr; GUI_DrawDot
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Char
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_DrawEqBand
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_DrawTextBox
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_DrawValueBox
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_DrawCheckBox
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_DrawFloat
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_DrawValue
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Menu
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_About
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Device
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuDevice
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Audio
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchAllCH
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Main
</UL>

<P><STRONG><a name="[ae]"></a>GUI_WriteXY</STRONG> (Thumb, 166 bytes, Stack size 8 bytes, lcd.o(.text.GUI_WriteXY))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GUI_WriteXY
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillBuff_Origin
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBuff_Origin
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearBuff
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBuff
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillBuff
</UL>

<P><STRONG><a name="[e1]"></a>GetMCUInfo</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, func.o(.text.GetMCUInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetMCUInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuDevice
</UL>

<P><STRONG><a name="[b9]"></a>GetRDS</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, saf775x.o(.text.GetRDS))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = GetRDS &rArr; Get_REG &rArr; I2C_Restart &rArr; I2C_Start &rArr; I2C_WriteByte &rArr; gpio_input_bit_get
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_REG
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeRDS
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bb]"></a>GetStatus</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, saf775x.o(.text.GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = GetStatus &rArr; Get_REG &rArr; I2C_Restart &rArr; I2C_Start &rArr; I2C_WriteByte &rArr; gpio_input_bit_get
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_REG
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isSigOK
</UL>

<P><STRONG><a name="[bc]"></a>Get_ADSP</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, saf775x.o(.text.Get_ADSP))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = Get_ADSP &rArr; I2C_Restart &rArr; I2C_Start &rArr; I2C_WriteByte &rArr; gpio_input_bit_get
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadByte
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Restart
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteByte
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getQPDAverPeak
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitEasyProgram
</UL>

<P><STRONG><a name="[ba]"></a>Get_REG</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, saf775x.o(.text.Get_REG))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = Get_REG &rArr; I2C_Restart &rArr; I2C_Start &rArr; I2C_WriteByte &rArr; gpio_input_bit_get
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadByte
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Restart
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteByte
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRDS
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuDevice
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStatus
</UL>

<P><STRONG><a name="[c2]"></a>GoChannel</STRONG> (Thumb, 482 bytes, Stack size 16 bytes, main.o(.text.GoChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = GoChannel &rArr; TuneFreq &rArr; Set_REG &rArr; I2C_Start &rArr; I2C_WriteByte &rArr; gpio_input_bit_get
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDS_Refresh
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TuneFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f30x_it.o(.text.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[17c]"></a>I2C_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init.o(.text.I2C_Init))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c0]"></a>I2C_ReadByte</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, iic_sw.o(.text.I2C_ReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = I2C_ReadByte &rArr; gpio_input_bit_get
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_bit_get
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_REG
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ADSP
</UL>

<P><STRONG><a name="[bf]"></a>I2C_Restart</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, iic_sw.o(.text.I2C_Restart))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = I2C_Restart &rArr; I2C_Start &rArr; I2C_WriteByte &rArr; gpio_input_bit_get
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Delay
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_REG
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ADSP
</UL>

<P><STRONG><a name="[bd]"></a>I2C_Start</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, iic_sw.o(.text.I2C_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = I2C_Start &rArr; I2C_WriteByte &rArr; gpio_input_bit_get
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Delay
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_REG
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Transmit
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ADSP
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_ADSP_multi
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_ADSP
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Restart
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_REGFree
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_REG
</UL>

<P><STRONG><a name="[c1]"></a>I2C_Stop</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, iic_sw.o(.text.I2C_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = I2C_Stop &rArr; I2C_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_REG
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Transmit
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ADSP
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_ADSP_multi
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_ADSP
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_REGFree
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_REG
</UL>

<P><STRONG><a name="[95]"></a>I2C_Transmit</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, iic_sw.o(.text.I2C_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = I2C_Transmit &rArr; I2C_Start &rArr; I2C_WriteByte &rArr; gpio_input_bit_get
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteByte
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_WRITE_DATA
</UL>

<P><STRONG><a name="[be]"></a>I2C_WriteByte</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, iic_sw.o(.text.I2C_WriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = I2C_WriteByte &rArr; gpio_input_bit_get
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_bit_get
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_REG
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Transmit
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ADSP
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_ADSP_multi
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_ADSP
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_REGFree
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_REG
</UL>

<P><STRONG><a name="[137]"></a>Judge_length</STRONG> (Thumb, 100 bytes, Stack size 4 bytes, ui.o(.text.Judge_length))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Judge_length
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;num2str
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Main
</UL>

<P><STRONG><a name="[61]"></a>KEY_Handler</STRONG> (Thumb, 288 bytes, Stack size 16 bytes, main.o(.text.KEY_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = KEY_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reFillBackLightTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Callback
</UL>

<P><STRONG><a name="[c5]"></a>LCD_Init</STRONG> (Thumb, 304 bytes, Stack size 64 bytes, lcd.o(.text.LCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = LCD_Init &rArr; DispGreyLevel &rArr; lcd_write_cmd &rArr; gpio_bit_write
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_enable
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearBuff
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispInverse
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispGreyLevel
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispContrast
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SPI_Init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPixelOn
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispFill
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_cursor
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c6]"></a>LCD_SPI_Init</STRONG> (Thumb, 178 bytes, Stack size 56 bytes, lcd.o(.text.LCD_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = LCD_SPI_Init &rArr; spi_i2s_deinit &rArr; rcu_periph_reset_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_bidirectional_transfer_config
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nss_output_disable
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_enable
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_struct_para_init
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[179]"></a>LCD_StructInit</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, lcd.o(.text.LCD_StructInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_StructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f30x_it.o(.text.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[d1]"></a>MenuAbout</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, main.o(.text.MenuAbout))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = MenuAbout &rArr; UI_About &rArr; GUI_Text &rArr; GUI_Char &rArr; GUI_DrawBuff &rArr; GUI_DrawDot
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_About
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VolumeHandler
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flushKey
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuMain
</UL>

<P><STRONG><a name="[d5]"></a>MenuAudio</STRONG> (Thumb, 1576 bytes, Stack size 144 bytes, main.o(.text.MenuAudio))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = MenuAudio &rArr; UI_Audio &rArr; UI_DrawEq &rArr; UI_DrawEqBand &rArr; GUI_Float &rArr; GUI_Number &rArr; GUI_Char &rArr; GUI_DrawBuff &rArr; GUI_DrawDot
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setUltraBassGain
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTone
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setGraphicEQ
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setDCFilter
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inRangeFloat
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBalance
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMainVol
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inRangeLoop
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Audio
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VolumeHandler
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inRangeInt
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flushKey
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveSettings
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuMain
</UL>

<P><STRONG><a name="[e0]"></a>MenuDevice</STRONG> (Thumb, 1116 bytes, Stack size 80 bytes, main.o(.text.MenuDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = MenuDevice &rArr; UI_Device &rArr; UI_DrawCheckBox &rArr; GUI_Text &rArr; GUI_Char &rArr; GUI_DrawBuff &rArr; GUI_DrawDot
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Device
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_REG
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMCUInfo
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Text
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VolumeHandler
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flushKey
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveSettings
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SystemReset
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuMain
</UL>

<P><STRONG><a name="[e5]"></a>MenuDisplay</STRONG> (Thumb, 680 bytes, Stack size 40 bytes, main.o(.text.MenuDisplay))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = MenuDisplay &rArr; UI_Display &rArr; UI_DrawValueBox &rArr; GUI_Number &rArr; GUI_Char &rArr; GUI_DrawBuff &rArr; GUI_DrawDot
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispInverse
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispGreyLevel
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispContrast
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_OutVal
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_update
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Display
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VolumeHandler
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inRangeInt
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flushKey
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveSettings
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuMain
</UL>

<P><STRONG><a name="[e8]"></a>MenuMain</STRONG> (Thumb, 274 bytes, Stack size 16 bytes, main.o(.text.MenuMain))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = MenuMain &rArr; MenuAudio &rArr; UI_Audio &rArr; UI_DrawEq &rArr; UI_DrawEqBand &rArr; GUI_Float &rArr; GUI_Number &rArr; GUI_Char &rArr; GUI_DrawBuff &rArr; GUI_DrawDot
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Menu
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuAbout
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuDevice
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuSearch
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuRadio
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuAudio
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuDisplay
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Main
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VolumeHandler
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flushKey
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ea]"></a>MenuRadio</STRONG> (Thumb, 1004 bytes, Stack size 64 bytes, main.o(.text.MenuRadio))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = MenuRadio &rArr; UI_Radio &rArr; UI_DrawTextBox &rArr; GUI_Text &rArr; GUI_Char &rArr; GUI_DrawBuff &rArr; GUI_DrawDot
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSoftMute
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetNoiseBlanker
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFMDeemphasis
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRadioSignal
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFMAntenna
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFMClickNoiseSuppression
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFMiMultipathSuppression
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFMChannelEqualizer
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFMStereoImprovement
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFMiPhaseDiversity
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Radio
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VolumeHandler
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inRangeInt
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flushKey
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveSettings
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuMain
</UL>

<P><STRONG><a name="[eb]"></a>MenuSearch</STRONG> (Thumb, 526 bytes, Stack size 48 bytes, main.o(.text.MenuSearch))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = MenuSearch &rArr; UI_Search &rArr; UI_DrawValueBox &rArr; GUI_Number &rArr; GUI_Char &rArr; GUI_DrawBuff &rArr; GUI_DrawDot
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Search
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchAllCH
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VolumeHandler
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inRangeInt
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flushKey
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveChannels
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveSettings
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuMain
</UL>

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f30x_it.o(.text.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f30x_it.o(.text.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[fa]"></a>RDS_Init</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, rds.o(.text.RDS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RDS_Init &rArr; FillStr
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillStr
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7f]"></a>RDS_Refresh</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, rds.o(.text.RDS_Refresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RDS_Refresh &rArr; FillStr
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillStr
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoChannel
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchCH
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdjustFreq
</UL>

<P><STRONG><a name="[fe]"></a>RTC_Callback</STRONG> (Thumb, 208 bytes, Stack size 4 bytes, main.o(.text.RTC_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RTC_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, gd32f30x_it.o(.text.RTC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = RTC_IRQHandler &rArr; rtc_set_alarm &rArr; nvic_irq_enable &rArr; nvic_priority_group_set
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_flag_clear
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_flag_get
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_lwoff_wait
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_get_time
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Callback
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_set_alarm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[102]"></a>RTC_Init</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, rtc.o(.text.RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = RTC_Init &rArr; rcu_osci_stab_wait &rArr; rcu_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_prescaler_set
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_register_sync_wait
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_lwoff_wait
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_interrupt_enable
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_osci_on
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_rtc_clock_config
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_osci_stab_wait
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_backup_write_enable
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkp_deinit
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_set_alarm
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_set_time
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[97]"></a>ReadPI</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, rds.o(.text.ReadPI))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ReadPI &rArr; FindMin
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckError
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckVersionType
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindMin
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeRDS
</UL>

<P><STRONG><a name="[9a]"></a>ReadPS</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, rds.o(.text.ReadPS))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ReadPS &rArr; CheckError
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckError
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeRDS
</UL>

<P><STRONG><a name="[9b]"></a>ReadRT</STRONG> (Thumb, 480 bytes, Stack size 24 bytes, rds.o(.text.ReadRT))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ReadRT &rArr; FillStr
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckError
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckVersionType
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillStr
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeRDS
</UL>

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f30x_it.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[10e]"></a>SYS_Init</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, init.o(.text.SYS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SYS_Init &rArr; systick_config &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_adc_clock_config
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_priority_group_set
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_config
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f9]"></a>SearchAllCH</STRONG> (Thumb, 1180 bytes, Stack size 64 bytes, main.o(.text.SearchAllCH))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = SearchAllCH &rArr; GUI_SeekALL &rArr; GUI_Number &rArr; GUI_Char &rArr; GUI_DrawBuff &rArr; GUI_DrawDot
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Text
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SeekALL
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isSigOK
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMute
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFilter
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TuneFreq
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flushKey
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuSearch
</UL>

<P><STRONG><a name="[114]"></a>SearchCH</STRONG> (Thumb, 414 bytes, Stack size 48 bytes, main.o(.text.SearchCH))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = SearchCH &rArr; UI_Main &rArr; GUI_Number &rArr; GUI_Char &rArr; GUI_DrawBuff &rArr; GUI_DrawDot
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Main
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isSigOK
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMute
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFilter
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDS_Refresh
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TuneFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f3]"></a>SetFMAntenna</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, saf775x.o(.text.SetFMAntenna))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = SetFMAntenna &rArr; SetTunerOPT &rArr; Set_REG &rArr; I2C_Start &rArr; I2C_WriteByte &rArr; gpio_input_bit_get
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTunerOPT
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuRadio
</UL>

<P><STRONG><a name="[f0]"></a>SetFMChannelEqualizer</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, saf775x.o(.text.SetFMChannelEqualizer))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = SetFMChannelEqualizer &rArr; SetRadioDSP &rArr; Set_REG &rArr; I2C_Start &rArr; I2C_WriteByte &rArr; gpio_input_bit_get
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRadioDSP
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuRadio
</UL>

<P><STRONG><a name="[f2]"></a>SetFMClickNoiseSuppression</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, saf775x.o(.text.SetFMClickNoiseSuppression))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = SetFMClickNoiseSuppression &rArr; SetRadioDSP &rArr; Set_REG &rArr; I2C_Start &rArr; I2C_WriteByte &rArr; gpio_input_bit_get
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRadioDSP
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuRadio
</UL>

<P><STRONG><a name="[f5]"></a>SetFMDeemphasis</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, saf775x.o(.text.SetFMDeemphasis))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = SetFMDeemphasis &rArr; SetRadioSignal &rArr; Set_REG &rArr; I2C_Start &rArr; I2C_WriteByte &rArr; gpio_input_bit_get
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRadioSignal
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuRadio
</UL>

<P><STRONG><a name="[ef]"></a>SetFMStereoImprovement</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, saf775x.o(.text.SetFMStereoImprovement))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = SetFMStereoImprovement &rArr; SetRadioSignal &rArr; Set_REG &rArr; I2C_Start &rArr; I2C_WriteByte &rArr; gpio_input_bit_get
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRadioSignal
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_REGFree
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuRadio
</UL>

<P><STRONG><a name="[f1]"></a>SetFMiMultipathSuppression</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, saf775x.o(.text.SetFMiMultipathSuppression))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = SetFMiMultipathSuppression &rArr; SetRadioDSP &rArr; Set_REG &rArr; I2C_Start &rArr; I2C_WriteByte &rArr; gpio_input_bit_get
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRadioDSP
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuRadio
</UL>

<P><STRONG><a name="[ee]"></a>SetFMiPhaseDiversity</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, saf775x.o(.text.SetFMiPhaseDiversity))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = SetFMiPhaseDiversity &rArr; SetTunerOPT &rArr; Set_REG &rArr; I2C_Start &rArr; I2C_WriteByte &rArr; gpio_input_bit_get
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTunerOPT
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuRadio
</UL>

<P><STRONG><a name="[7c]"></a>SetFilter</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, saf775x.o(.text.SetFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = SetFilter &rArr; SetTuner &rArr; Set_REG &rArr; I2C_Start &rArr; I2C_WriteByte &rArr; gpio_input_bit_get
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTuner
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchAllCH
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchCH
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdjustFilter
</UL>

<P><STRONG><a name="[112]"></a>SetMute</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, saf775x.o(.text.SetMute))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = SetMute &rArr; setMute &rArr; Set_ADSP_multi &rArr; I2C_Start &rArr; I2C_WriteByte &rArr; gpio_input_bit_get
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMute
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchBand
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchAllCH
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchCH
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VolumeHandler
</UL>

<P><STRONG><a name="[f6]"></a>SetNoiseBlanker</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, saf775x.o(.text.SetNoiseBlanker))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = SetNoiseBlanker &rArr; SetRadioDSP &rArr; Set_REG &rArr; I2C_Start &rArr; I2C_WriteByte &rArr; gpio_input_bit_get
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRadioDSP
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuRadio
</UL>

<P><STRONG><a name="[11a]"></a>SetRadioAutoBW</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, saf775x.o(.text.SetRadioAutoBW))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = SetRadioAutoBW &rArr; Set_REG &rArr; I2C_Start &rArr; I2C_WriteByte &rArr; gpio_input_bit_get
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_REG
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchBand
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunerInit
</UL>

<P><STRONG><a name="[116]"></a>SetRadioDSP</STRONG> (Thumb, 304 bytes, Stack size 16 bytes, saf775x.o(.text.SetRadioDSP))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = SetRadioDSP &rArr; Set_REG &rArr; I2C_Start &rArr; I2C_WriteByte &rArr; gpio_input_bit_get
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_REG
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchBand
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunerInit
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetNoiseBlanker
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFMClickNoiseSuppression
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFMiMultipathSuppression
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFMChannelEqualizer
</UL>

<P><STRONG><a name="[f4]"></a>SetRadioSignal</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, saf775x.o(.text.SetRadioSignal))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = SetRadioSignal &rArr; Set_REG &rArr; I2C_Start &rArr; I2C_WriteByte &rArr; gpio_input_bit_get
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_REG
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchBand
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunerInit
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFMDeemphasis
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFMStereoImprovement
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuRadio
</UL>

<P><STRONG><a name="[f7]"></a>SetSoftMute</STRONG> (Thumb, 362 bytes, Stack size 32 bytes, saf775x.o(.text.SetSoftMute))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = SetSoftMute &rArr; Set_REGFree &rArr; I2C_Start &rArr; I2C_WriteByte &rArr; gpio_input_bit_get
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_REGFree
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchBand
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuRadio
</UL>

<P><STRONG><a name="[118]"></a>SetTuner</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, saf775x.o(.text.SetTuner))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = SetTuner &rArr; Set_REG &rArr; I2C_Start &rArr; I2C_WriteByte &rArr; gpio_input_bit_get
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_REG
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchBand
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunerInit
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFilter
</UL>

<P><STRONG><a name="[115]"></a>SetTunerOPT</STRONG> (Thumb, 288 bytes, Stack size 16 bytes, saf775x.o(.text.SetTunerOPT))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = SetTunerOPT &rArr; Set_REG &rArr; I2C_Start &rArr; I2C_WriteByte &rArr; gpio_input_bit_get
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_REG
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchBand
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunerInit
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFMAntenna
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFMiPhaseDiversity
</UL>

<P><STRONG><a name="[81]"></a>SetVolume</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, saf775x.o(.text.SetVolume))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SetVolume &rArr; setFader &rArr; dataConv &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setFader
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdjustVolume
</UL>

<P><STRONG><a name="[a7]"></a>Set_ADSP</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, saf775x.o(.text.Set_ADSP))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Set_ADSP &rArr; I2C_Start &rArr; I2C_WriteByte &rArr; gpio_input_bit_get
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteByte
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMute
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initQPD
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initGraphicSA
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initUltraBass
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSignalScaler
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initGraphicEQ
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setUltraBassGain
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBalance
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setGraphicSAGain
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setGraphicEQPreScal
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTonePreScal
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EasyProgramUpdateCoeff
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setFader
</UL>

<P><STRONG><a name="[a6]"></a>Set_ADSP_multi</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, saf775x.o(.text.Set_ADSP_multi))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Set_ADSP_multi &rArr; I2C_Start &rArr; I2C_WriteByte &rArr; gpio_input_bit_get
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteByte
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMute
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initGraphicSA
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMainVol
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EasyProgramUpdateCoeff
</UL>

<P><STRONG><a name="[11b]"></a>Set_REG</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, saf775x.o(.text.Set_REG))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Set_REG &rArr; I2C_Start &rArr; I2C_WriteByte &rArr; gpio_input_bit_get
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteByte
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRadioSignal
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TuneFreq
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRadioAutoBW
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRadioDSP
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTunerOPT
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTuner
</UL>

<P><STRONG><a name="[117]"></a>Set_REGFree</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, saf775x.o(.text.Set_REGFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = Set_REGFree &rArr; I2C_Start &rArr; I2C_WriteByte &rArr; gpio_input_bit_get
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteByte
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSoftMute
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFMStereoImprovement
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lineDriverMode
</UL>

<P><STRONG><a name="[11d]"></a>SwitchBand</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, saf775x.o(.text.SwitchBand))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = SwitchBand &rArr; SetSoftMute &rArr; Set_REGFree &rArr; I2C_Start &rArr; I2C_WriteByte &rArr; gpio_input_bit_get
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMute
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSoftMute
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRadioSignal
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMute
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TuneFreq
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRadioAutoBW
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRadioDSP
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTunerOPT
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTuner
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f30x_it.o(.text.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>SystemInit</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, system_gd32f30x.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SystemInit &rArr; system_clock_config &rArr; system_clock_120m_irc8m
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(.text)
</UL>
<P><STRONG><a name="[40]"></a>TIMER5_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gd32f30x_it.o(.text.TIMER5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = TIMER5_IRQHandler &rArr; TIM_Callback &rArr; lcd_update &rArr; lcd_set_window &rArr; lcd_write_cmd &rArr; gpio_bit_write
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Callback
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIMER6_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gd32f30x_it.o(.text.TIMER6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = TIMER6_IRQHandler &rArr; TIM_Callback &rArr; lcd_update &rArr; lcd_set_window &rArr; lcd_write_cmd &rArr; gpio_bit_write
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Callback
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[120]"></a>TIM_Callback</STRONG> (Thumb, 1026 bytes, Stack size 24 bytes, main.o(.text.TIM_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = TIM_Callback &rArr; lcd_update &rArr; lcd_set_window &rArr; lcd_write_cmd &rArr; gpio_bit_write
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_bit_get
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_software_trigger_enable
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_GetValue
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_OutVal
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_update
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reFillBackLightTimer
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER6_IRQHandler
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER5_IRQHandler
</UL>

<P><STRONG><a name="[123]"></a>Timer_Init</STRONG> (Thumb, 254 bytes, Stack size 64 bytes, init.o(.text.Timer_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Timer_Init &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_clock_freq_get
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_clear
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_enable
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_struct_para_init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7e]"></a>TuneFreq</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, saf775x.o(.text.TuneFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = TuneFreq &rArr; Set_REG &rArr; I2C_Start &rArr; I2C_WriteByte &rArr; gpio_input_bit_get
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_REG
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchBand
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunerInit
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoChannel
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchAllCH
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchCH
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdjustFreq
</UL>

<P><STRONG><a name="[129]"></a>TunerInit</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, saf775x.o(.text.TunerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = TunerInit &rArr; BootDirana3 &rArr; DSP_WRITE_DATA &rArr; I2C_Transmit &rArr; I2C_Start &rArr; I2C_WriteByte &rArr; gpio_input_bit_get
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRadioSignal
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TuneFreq
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRadioAutoBW
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRadioDSP
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTunerOPT
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTuner
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootDirana3
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17a]"></a>TunerStructInit</STRONG> (Thumb, 294 bytes, Stack size 20 bytes, saf775x.o(.text.TunerStructInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TunerStructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d2]"></a>UI_About</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, ui.o(.text.UI_About))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = UI_About &rArr; GUI_Text &rArr; GUI_Char &rArr; GUI_DrawBuff &rArr; GUI_DrawDot
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearBuff
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBuff
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Text
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuAbout
</UL>

<P><STRONG><a name="[d6]"></a>UI_Audio</STRONG> (Thumb, 1528 bytes, Stack size 200 bytes, ui.o(.text.UI_Audio))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = UI_Audio &rArr; UI_DrawEq &rArr; UI_DrawEqBand &rArr; GUI_Float &rArr; GUI_Number &rArr; GUI_Char &rArr; GUI_DrawBuff &rArr; GUI_DrawDot
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBuff_Origin
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearBuff
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_DrawTone
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_DrawEq
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_DrawEqBand
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_DrawFloat
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_DrawValue
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBuff
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_DrawSelectBar
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Text
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuAudio
</UL>

<P><STRONG><a name="[e3]"></a>UI_Device</STRONG> (Thumb, 1012 bytes, Stack size 96 bytes, ui.o(.text.UI_Device))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = UI_Device &rArr; UI_DrawCheckBox &rArr; GUI_Text &rArr; GUI_Char &rArr; GUI_DrawBuff &rArr; GUI_DrawDot
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearBuff
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_DrawCheckBox
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Number
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_DrawSelectBar
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Char
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_DrawScrollBar
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Text
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuDevice
</UL>

<P><STRONG><a name="[e6]"></a>UI_Display</STRONG> (Thumb, 912 bytes, Stack size 72 bytes, ui.o(.text.UI_Display))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = UI_Display &rArr; UI_DrawValueBox &rArr; GUI_Number &rArr; GUI_Char &rArr; GUI_DrawBuff &rArr; GUI_DrawDot
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearBuff
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_DrawValueBox
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Rectangle
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_DrawCheckBox
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillBuff
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_DrawSelectBar
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_DrawScrollBar
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuDisplay
</UL>

<P><STRONG><a name="[130]"></a>UI_DrawCheckBox</STRONG> (Thumb, 222 bytes, Stack size 64 bytes, ui.o(.text.UI_DrawCheckBox))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = UI_DrawCheckBox &rArr; GUI_Text &rArr; GUI_Char &rArr; GUI_DrawBuff &rArr; GUI_DrawDot
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Rectangle
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBuff
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillBuff
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Text
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Device
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Search
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Radio
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Display
</UL>

<P><STRONG><a name="[12f]"></a>UI_DrawEq</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, ui.o(.text.UI_DrawEq))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = UI_DrawEq &rArr; UI_DrawEqBand &rArr; GUI_Float &rArr; GUI_Number &rArr; GUI_Char &rArr; GUI_DrawBuff &rArr; GUI_DrawDot
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_DrawEqBand
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Audio
</UL>

<P><STRONG><a name="[12b]"></a>UI_DrawEqBand</STRONG> (Thumb, 712 bytes, Stack size 104 bytes, ui.o(.text.UI_DrawEqBand))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = UI_DrawEqBand &rArr; GUI_Float &rArr; GUI_Number &rArr; GUI_Char &rArr; GUI_DrawBuff &rArr; GUI_DrawDot
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Float
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Number
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillBuff
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Line_VH
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Text
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_DrawEq
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Audio
</UL>

<P><STRONG><a name="[12e]"></a>UI_DrawFloat</STRONG> (Thumb, 202 bytes, Stack size 64 bytes, ui.o(.text.UI_DrawFloat))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = UI_DrawFloat &rArr; GUI_Float &rArr; GUI_Number &rArr; GUI_Char &rArr; GUI_DrawBuff &rArr; GUI_DrawDot
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Float
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillBuff
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Text
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Audio
</UL>

<P><STRONG><a name="[133]"></a>UI_DrawOneGSA</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, ui.o(.text.UI_DrawOneGSA))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UI_DrawOneGSA &rArr; GUI_FillBuff &rArr; GUI_WriteXY
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillBuff
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Main
</UL>

<P><STRONG><a name="[131]"></a>UI_DrawScrollBar</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, ui.o(.text.UI_DrawScrollBar))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = UI_DrawScrollBar &rArr; GUI_Char &rArr; GUI_DrawBuff &rArr; GUI_DrawDot
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Char
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Line_VH
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Menu
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Device
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Search
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Radio
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Display
</UL>

<P><STRONG><a name="[12a]"></a>UI_DrawSelectBar</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, ui.o(.text.UI_DrawSelectBar))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UI_DrawSelectBar &rArr; GUI_FillBuff &rArr; GUI_WriteXY
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillBuff
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_DrawTone
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Device
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Search
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Radio
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Audio
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Display
</UL>

<P><STRONG><a name="[134]"></a>UI_DrawTextBox</STRONG> (Thumb, 280 bytes, Stack size 64 bytes, ui.o(.text.UI_DrawTextBox))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = UI_DrawTextBox &rArr; GUI_Text &rArr; GUI_Char &rArr; GUI_DrawBuff &rArr; GUI_DrawDot
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBuff
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillBuff
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Text
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Search
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Radio
</UL>

<P><STRONG><a name="[12c]"></a>UI_DrawTone</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, ui.o(.text.UI_DrawTone))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = UI_DrawTone &rArr; UI_DrawValue &rArr; GUI_Number &rArr; GUI_Char &rArr; GUI_DrawBuff &rArr; GUI_DrawDot
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_DrawToneBar
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_DrawValue
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_DrawSelectBar
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Audio
</UL>

<P><STRONG><a name="[135]"></a>UI_DrawToneBar</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, ui.o(.text.UI_DrawToneBar))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UI_DrawToneBar &rArr; GUI_FillBuff &rArr; GUI_WriteXY
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillBuff
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_DrawTone
</UL>

<P><STRONG><a name="[12d]"></a>UI_DrawValue</STRONG> (Thumb, 190 bytes, Stack size 56 bytes, ui.o(.text.UI_DrawValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = UI_DrawValue &rArr; GUI_Number &rArr; GUI_Char &rArr; GUI_DrawBuff &rArr; GUI_DrawDot
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Number
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillBuff
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Text
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_DrawTone
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Audio
</UL>

<P><STRONG><a name="[132]"></a>UI_DrawValueBox</STRONG> (Thumb, 334 bytes, Stack size 72 bytes, ui.o(.text.UI_DrawValueBox))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = UI_DrawValueBox &rArr; GUI_Number &rArr; GUI_Char &rArr; GUI_DrawBuff &rArr; GUI_DrawDot
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Number
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBuff
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillBuff
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Text
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Search
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Display
</UL>

<P><STRONG><a name="[ec]"></a>UI_Main</STRONG> (Thumb, 4316 bytes, Stack size 256 bytes, ui.o(.text.UI_Main))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = UI_Main &rArr; GUI_Number &rArr; GUI_Char &rArr; GUI_DrawBuff &rArr; GUI_DrawDot
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillBuff_Origin
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBuff_Origin
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearBuff
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_DrawOneGSA
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Number
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBuff
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillBuff
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Char
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;num2str
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_length
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Text
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuMain
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchCH
</UL>

<P><STRONG><a name="[e9]"></a>UI_Menu</STRONG> (Thumb, 632 bytes, Stack size 64 bytes, ui.o(.text.UI_Menu))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = UI_Menu &rArr; GUI_Text &rArr; GUI_Char &rArr; GUI_DrawBuff &rArr; GUI_DrawDot
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearBuff
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBuff
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Line_VH
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_DrawScrollBar
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Text
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuMain
</UL>

<P><STRONG><a name="[ed]"></a>UI_Radio</STRONG> (Thumb, 1422 bytes, Stack size 72 bytes, ui.o(.text.UI_Radio))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = UI_Radio &rArr; UI_DrawTextBox &rArr; GUI_Text &rArr; GUI_Char &rArr; GUI_DrawBuff &rArr; GUI_DrawDot
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearBuff
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_DrawTextBox
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_DrawCheckBox
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_DrawSelectBar
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_DrawScrollBar
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuRadio
</UL>

<P><STRONG><a name="[f8]"></a>UI_Search</STRONG> (Thumb, 694 bytes, Stack size 48 bytes, ui.o(.text.UI_Search))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = UI_Search &rArr; UI_DrawValueBox &rArr; GUI_Number &rArr; GUI_Char &rArr; GUI_DrawBuff &rArr; GUI_DrawDot
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearBuff
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_DrawTextBox
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_DrawValueBox
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Rectangle
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_DrawCheckBox
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_DrawSelectBar
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_DrawScrollBar
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuSearch
</UL>

<P><STRONG><a name="[138]"></a>USART_Init</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, init.o(.text.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = USART_Init &rArr; usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_hardware_flow_cts_config
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_hardware_flow_rts_config
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_receive_config
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_transmit_config
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_enable
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_stop_bit_set
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_word_length_set
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_parity_config
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_baudrate_set
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f30x_it.o(.text.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[d4]"></a>VolumeHandler</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, main.o(.text.VolumeHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = VolumeHandler &rArr; AdjustVolume &rArr; SetVolume &rArr; setFader &rArr; dataConv &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMute
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdjustVolume
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuMain
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuAbout
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuDevice
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuSearch
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuRadio
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuAudio
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuDisplay
</UL>

<P><STRONG><a name="[94]"></a>WaitBusy</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, saf775x.o(.text.WaitBusy))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = WaitBusy &rArr; gpio_input_bit_get
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_bit_get
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_WRITE_DATA
</UL>

<P><STRONG><a name="[a5]"></a>WaitEasyProgram</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dirana3basicdsp.o(.text.WaitEasyProgram))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = WaitEasyProgram &rArr; Get_ADSP &rArr; I2C_Restart &rArr; I2C_Start &rArr; I2C_WriteByte &rArr; gpio_input_bit_get
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ADSP
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EasyProgramUpdateCoeff
</UL>

<P><STRONG><a name="[76]"></a>adc_calibration_enable</STRONG> (Thumb, 60 bytes, Stack size 4 bytes, gd32f30x_adc.o(.text.adc_calibration_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = adc_calibration_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[6d]"></a>adc_channel_length_config</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, gd32f30x_adc.o(.text.adc_channel_length_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = adc_channel_length_config
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[6c]"></a>adc_data_alignment_config</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, gd32f30x_adc.o(.text.adc_data_alignment_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = adc_data_alignment_config
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[69]"></a>adc_deinit</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, gd32f30x_adc.o(.text.adc_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = adc_deinit &rArr; rcu_periph_reset_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[74]"></a>adc_enable</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, gd32f30x_adc.o(.text.adc_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = adc_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[70]"></a>adc_external_trigger_config</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, gd32f30x_adc.o(.text.adc_external_trigger_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = adc_external_trigger_config
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[6f]"></a>adc_external_trigger_source_config</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, gd32f30x_adc.o(.text.adc_external_trigger_source_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = adc_external_trigger_source_config
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[71]"></a>adc_inserted_channel_config</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, gd32f30x_adc.o(.text.adc_inserted_channel_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = adc_inserted_channel_config
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[64]"></a>adc_inserted_data_read</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, gd32f30x_adc.o(.text.adc_inserted_data_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = adc_inserted_data_read
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Callback
</UL>

<P><STRONG><a name="[73]"></a>adc_interrupt_enable</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, gd32f30x_adc.o(.text.adc_interrupt_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = adc_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[63]"></a>adc_interrupt_flag_clear</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gd32f30x_adc.o(.text.adc_interrupt_flag_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = adc_interrupt_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Callback
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[5e]"></a>adc_interrupt_flag_get</STRONG> (Thumb, 162 bytes, Stack size 20 bytes, gd32f30x_adc.o(.text.adc_interrupt_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = adc_interrupt_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_1_IRQHandler
</UL>

<P><STRONG><a name="[6a]"></a>adc_mode_config</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, gd32f30x_adc.o(.text.adc_mode_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = adc_mode_config
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[6e]"></a>adc_regular_channel_config</STRONG> (Thumb, 372 bytes, Stack size 20 bytes, gd32f30x_adc.o(.text.adc_regular_channel_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = adc_regular_channel_config
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[60]"></a>adc_regular_data_read</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, gd32f30x_adc.o(.text.adc_regular_data_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = adc_regular_data_read
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Callback
</UL>

<P><STRONG><a name="[121]"></a>adc_software_trigger_enable</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, gd32f30x_adc.o(.text.adc_software_trigger_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = adc_software_trigger_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Callback
</UL>

<P><STRONG><a name="[6b]"></a>adc_special_function_config</STRONG> (Thumb, 166 bytes, Stack size 12 bytes, gd32f30x_adc.o(.text.adc_special_function_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = adc_special_function_config
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[77]"></a>adc_tempsensor_vrefint_enable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32f30x_adc.o(.text.adc_tempsensor_vrefint_enable))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[104]"></a>bkp_deinit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gd32f30x_bkp.o(.text.bkp_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bkp_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_bkp_reset_disable
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_bkp_reset_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[175]"></a>bkp_read_data</STRONG> (Thumb, 108 bytes, Stack size 4 bytes, gd32f30x_bkp.o(.text.bkp_read_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = bkp_read_data
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[176]"></a>bkp_write_data</STRONG> (Thumb, 102 bytes, Stack size 4 bytes, gd32f30x_bkp.o(.text.bkp_write_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = bkp_write_data
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8f]"></a>dac_data_set</STRONG> (Thumb, 172 bytes, Stack size 20 bytes, gd32f30x_dac.o(.text.dac_data_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = dac_data_set
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_OutVal
</UL>

<P><STRONG><a name="[88]"></a>dac_deinit</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, gd32f30x_dac.o(.text.dac_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = dac_deinit &rArr; rcu_periph_reset_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Init
</UL>

<P><STRONG><a name="[8d]"></a>dac_disable</STRONG> (Thumb, 50 bytes, Stack size 4 bytes, gd32f30x_dac.o(.text.dac_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = dac_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Init
</UL>

<P><STRONG><a name="[c9]"></a>dac_enable</STRONG> (Thumb, 50 bytes, Stack size 4 bytes, gd32f30x_dac.o(.text.dac_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = dac_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[8c]"></a>dac_output_buffer_disable</STRONG> (Thumb, 50 bytes, Stack size 4 bytes, gd32f30x_dac.o(.text.dac_output_buffer_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = dac_output_buffer_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Init
</UL>

<P><STRONG><a name="[86]"></a>dac_output_value_get</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, gd32f30x_dac.o(.text.dac_output_value_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dac_output_value_get
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_GetValue
</UL>

<P><STRONG><a name="[90]"></a>dac_software_trigger_enable</STRONG> (Thumb, 50 bytes, Stack size 4 bytes, gd32f30x_dac.o(.text.dac_software_trigger_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = dac_software_trigger_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_OutVal
</UL>

<P><STRONG><a name="[8a]"></a>dac_trigger_enable</STRONG> (Thumb, 50 bytes, Stack size 4 bytes, gd32f30x_dac.o(.text.dac_trigger_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = dac_trigger_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Init
</UL>

<P><STRONG><a name="[89]"></a>dac_trigger_source_config</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, gd32f30x_dac.o(.text.dac_trigger_source_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dac_trigger_source_config
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Init
</UL>

<P><STRONG><a name="[8b]"></a>dac_wave_mode_config</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, gd32f30x_dac.o(.text.dac_wave_mode_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dac_wave_mode_config
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Init
</UL>

<P><STRONG><a name="[75]"></a>delay_ms</STRONG> (Thumb, 152 bytes, Stack size 12 bytes, systick.o(.text.delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuDevice
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isSigOK
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_waitBusy
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootDirana3
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_WRITE_DATA
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitBusy
</UL>

<P><STRONG><a name="[c8]"></a>delay_us</STRONG> (Thumb, 152 bytes, Stack size 12 bytes, systick.o(.text.delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initGraphicEQ
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitEasyProgram
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_spi_init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_waitBusy
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_power
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SPI_Init
</UL>

<P><STRONG><a name="[14a]"></a>dma_channel_disable</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, gd32f30x_dma.o(.text.dma_channel_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dma_channel_disable &rArr; dma_periph_and_channel_check
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_periph_and_channel_check
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_update
</UL>

<P><STRONG><a name="[14c]"></a>dma_channel_enable</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, gd32f30x_dma.o(.text.dma_channel_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dma_channel_enable &rArr; dma_periph_and_channel_check
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_periph_and_channel_check
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_update
</UL>

<P><STRONG><a name="[14d]"></a>dma_circulation_disable</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, gd32f30x_dma.o(.text.dma_circulation_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dma_circulation_disable &rArr; dma_periph_and_channel_check
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_periph_and_channel_check
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_dma_init
</UL>

<P><STRONG><a name="[14e]"></a>dma_deinit</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, gd32f30x_dma.o(.text.dma_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dma_deinit &rArr; dma_periph_and_channel_check
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_periph_and_channel_check
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_dma_init
</UL>

<P><STRONG><a name="[14f]"></a>dma_init</STRONG> (Thumb, 328 bytes, Stack size 24 bytes, gd32f30x_dma.o(.text.dma_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dma_init &rArr; dma_periph_and_channel_check
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_periph_and_channel_check
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_dma_init
</UL>

<P><STRONG><a name="[150]"></a>dma_interrupt_enable</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, gd32f30x_dma.o(.text.dma_interrupt_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dma_interrupt_enable &rArr; dma_periph_and_channel_check
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_periph_and_channel_check
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_dma_init
</UL>

<P><STRONG><a name="[92]"></a>dma_interrupt_flag_clear</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, gd32f30x_dma.o(.text.dma_interrupt_flag_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = dma_interrupt_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_Channel4_IRQHandler
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_dma_init
</UL>

<P><STRONG><a name="[91]"></a>dma_interrupt_flag_get</STRONG> (Thumb, 208 bytes, Stack size 28 bytes, gd32f30x_dma.o(.text.dma_interrupt_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = dma_interrupt_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_Channel4_IRQHandler
</UL>

<P><STRONG><a name="[151]"></a>dma_memory_address_config</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, gd32f30x_dma.o(.text.dma_memory_address_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dma_memory_address_config &rArr; dma_periph_and_channel_check
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_periph_and_channel_check
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_update
</UL>

<P><STRONG><a name="[152]"></a>dma_memory_to_memory_disable</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, gd32f30x_dma.o(.text.dma_memory_to_memory_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dma_memory_to_memory_disable &rArr; dma_periph_and_channel_check
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_periph_and_channel_check
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_dma_init
</UL>

<P><STRONG><a name="[172]"></a>dma_struct_para_init</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, gd32f30x_dma.o(.text.dma_struct_para_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = dma_struct_para_init
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_dma_init
</UL>

<P><STRONG><a name="[153]"></a>dma_transfer_number_config</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, gd32f30x_dma.o(.text.dma_transfer_number_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dma_transfer_number_config &rArr; dma_periph_and_channel_check
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_periph_and_channel_check
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_update
</UL>

<P><STRONG><a name="[154]"></a>flash_erase</STRONG> (Thumb, 272 bytes, Stack size 24 bytes, flash.o(.text.flash_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = flash_erase &rArr; flash_waitBusy &rArr; flash_readStatueReg &rArr; flash_readWriteByte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_waitBusy
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_writeEnable
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_readWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveChannels
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveSettings
</UL>

<P><STRONG><a name="[158]"></a>flash_init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, flash.o(.text.flash_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = flash_init &rArr; flash_spi_init &rArr; spi_i2s_deinit &rArr; rcu_periph_reset_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_spi_init
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_readID
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_power
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15a]"></a>flash_power</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, flash.o(.text.flash_power))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = flash_power &rArr; flash_readWriteByte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_readWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_init
</UL>

<P><STRONG><a name="[15c]"></a>flash_program</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, flash.o(.text.flash_program))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = flash_program &rArr; flash_program_page &rArr; flash_waitBusy &rArr; flash_readStatueReg &rArr; flash_readWriteByte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_program_page
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveSettings
</UL>

<P><STRONG><a name="[15d]"></a>flash_program_page</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, flash.o(.text.flash_program_page))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = flash_program_page &rArr; flash_waitBusy &rArr; flash_readStatueReg &rArr; flash_readWriteByte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_waitBusy
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_writeEnable
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_readWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveChannels
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_program
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveSettings
</UL>

<P><STRONG><a name="[15e]"></a>flash_read</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, flash.o(.text.flash_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = flash_read &rArr; flash_waitBusy &rArr; flash_readStatueReg &rArr; flash_readWriteByte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_waitBusy
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_readWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChannels
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readSettings
</UL>

<P><STRONG><a name="[15b]"></a>flash_readID</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, flash.o(.text.flash_readID))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = flash_readID &rArr; flash_readWriteByte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_readWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_init
</UL>

<P><STRONG><a name="[15f]"></a>flash_readStatueReg</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, flash.o(.text.flash_readStatueReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = flash_readStatueReg &rArr; flash_readWriteByte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_readWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_waitBusy
</UL>

<P><STRONG><a name="[157]"></a>flash_readWriteByte</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, flash.o(.text.flash_readWriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = flash_readWriteByte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_flag_get
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_data_receive
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_data_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_program_page
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_readID
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_power
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_writeEnable
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_readStatueReg
</UL>

<P><STRONG><a name="[159]"></a>flash_spi_init</STRONG> (Thumb, 182 bytes, Stack size 64 bytes, flash.o(.text.flash_spi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = flash_spi_init &rArr; spi_i2s_deinit &rArr; rcu_periph_reset_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nss_output_disable
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_enable
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_struct_para_init
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_init
</UL>

<P><STRONG><a name="[155]"></a>flash_waitBusy</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, flash.o(.text.flash_waitBusy))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = flash_waitBusy &rArr; flash_readStatueReg &rArr; flash_readWriteByte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_readStatueReg
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_program_page
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
</UL>

<P><STRONG><a name="[156]"></a>flash_writeEnable</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, flash.o(.text.flash_writeEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = flash_writeEnable &rArr; flash_readWriteByte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_readWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_program_page
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
</UL>

<P><STRONG><a name="[d3]"></a>flushKey</STRONG> (Thumb, 54 bytes, Stack size 4 bytes, main.o(.text.flushKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = flushKey
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuMain
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuAbout
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuDevice
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuSearch
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuRadio
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuAudio
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuDisplay
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchAllCH
</UL>

<P><STRONG><a name="[49]"></a>fputc</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, main.o(.text.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = fputc &rArr; usart_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_get
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[165]"></a>getQPDAverPeak</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, dirana3basicdsp.o(.text.getQPDAverPeak))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = getQPDAverPeak &rArr; Get_ADSP &rArr; I2C_Restart &rArr; I2C_Start &rArr; I2C_WriteByte &rArr; gpio_input_bit_get
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ADSP
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[66]"></a>gpio_bit_reset</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gd32f30x_gpio.o(.text.gpio_bit_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gpio_bit_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Callback
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Callback
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuRadio
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_update
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_program_page
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_readID
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_power
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_writeEnable
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_readStatueReg
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_multi_repeat
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_cmd
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootDirana3
</UL>

<P><STRONG><a name="[83]"></a>gpio_bit_set</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gd32f30x_gpio.o(.text.gpio_bit_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gpio_bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_dma_callback
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Callback
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_init
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuDevice
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuRadio
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_update
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_program_page
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_readID
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_power
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_writeEnable
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_readStatueReg
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_multi_repeat
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_cmd
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootDirana3
</UL>

<P><STRONG><a name="[174]"></a>gpio_bit_write</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, gd32f30x_gpio.o(.text.gpio_bit_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = gpio_bit_write
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_cmd
</UL>

<P><STRONG><a name="[aa]"></a>gpio_init</STRONG> (Thumb, 388 bytes, Stack size 28 bytes, gd32f30x_gpio.o(.text.gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_spi_init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SPI_Init
</UL>

<P><STRONG><a name="[62]"></a>gpio_input_bit_get</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, gd32f30x_gpio.o(.text.gpio_input_bit_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = gpio_input_bit_get
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Callback
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Callback
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitBusy
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadByte
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteByte
</UL>

<P><STRONG><a name="[a9]"></a>gpio_pin_remap_config</STRONG> (Thumb, 250 bytes, Stack size 24 bytes, gd32f30x_gpio.o(.text.gpio_pin_remap_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gpio_pin_remap_config
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[da]"></a>inRangeFloat</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, func.o(.text.inRangeFloat))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = inRangeFloat
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuAudio
</UL>

<P><STRONG><a name="[7b]"></a>inRangeInt</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, func.o(.text.inRangeInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = inRangeInt
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuSearch
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuRadio
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuAudio
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_OutVal
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuDisplay
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdjustFilter
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdjustFreq
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdjustVolume
</UL>

<P><STRONG><a name="[d7]"></a>inRangeLoop</STRONG> (Thumb, 58 bytes, Stack size 20 bytes, func.o(.text.inRangeLoop))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = inRangeLoop
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuAudio
</UL>

<P><STRONG><a name="[166]"></a>initBasicControl</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, dirana3basicdsp.o(.text.initBasicControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = initBasicControl &rArr; lineDriverMode &rArr; Set_REGFree &rArr; I2C_Start &rArr; I2C_WriteByte &rArr; gpio_input_bit_get
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lineDriverMode
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[168]"></a>initGraphicEQ</STRONG> (Thumb, 318 bytes, Stack size 32 bytes, dirana3basicdsp.o(.text.initGraphicEQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = initGraphicEQ &rArr; setGraphicEQ &rArr; EasyProgramUpdateCoeff &rArr; WaitEasyProgram &rArr; Get_ADSP &rArr; I2C_Restart &rArr; I2C_Start &rArr; I2C_WriteByte &rArr; gpio_input_bit_get
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setGraphicEQ
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_ADSP
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[169]"></a>initGraphicSA</STRONG> (Thumb, 1232 bytes, Stack size 192 bytes, dirana3basicdsp.o(.text.initGraphicSA))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = initGraphicSA &rArr; EasyProgramUpdateCoeff &rArr; WaitEasyProgram &rArr; Get_ADSP &rArr; I2C_Restart &rArr; I2C_Start &rArr; I2C_WriteByte &rArr; gpio_input_bit_get
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setGraphicSAGain
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EasyProgramUpdateCoeff
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataConv
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_ADSP_multi
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_ADSP
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17d]"></a>initGraphicSApara</STRONG> (Thumb, 300 bytes, Stack size 4 bytes, dirana3basicdsp.o(.text.initGraphicSApara))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = initGraphicSApara
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17b]"></a>initKeyFuncPara</STRONG> (Thumb, 94 bytes, Stack size 4 bytes, dirana3basicdsp.o(.text.initKeyFuncPara))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = initKeyFuncPara
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16d]"></a>initQPD</STRONG> (Thumb, 432 bytes, Stack size 96 bytes, dirana3basicdsp.o(.text.initQPD))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = initQPD &rArr; EasyProgramUpdateCoeff &rArr; WaitEasyProgram &rArr; Get_ADSP &rArr; I2C_Restart &rArr; I2C_Start &rArr; I2C_WriteByte &rArr; gpio_input_bit_get
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EasyProgramUpdateCoeff
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataConv
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_ADSP
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17e]"></a>initQPDpara</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, dirana3basicdsp.o(.text.initQPDpara))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = initQPDpara
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16e]"></a>initSignalScaler</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, dirana3basicdsp.o(.text.initSignalScaler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = initSignalScaler &rArr; dataConv &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataConv
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_ADSP
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16f]"></a>initTone</STRONG> (Thumb, 274 bytes, Stack size 48 bytes, dirana3basicdsp.o(.text.initTone))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = initTone &rArr; setTone &rArr; EasyProgramUpdateCoeff &rArr; WaitEasyProgram &rArr; Get_ADSP &rArr; I2C_Restart &rArr; I2C_Start &rArr; I2C_WriteByte &rArr; gpio_input_bit_get
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTone
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[170]"></a>initUltraBass</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, dirana3basicdsp.o(.text.initUltraBass))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = initUltraBass &rArr; Set_ADSP &rArr; I2C_Start &rArr; I2C_WriteByte &rArr; gpio_input_bit_get
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_ADSP
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[113]"></a>isSigOK</STRONG> (Thumb, 774 bytes, Stack size 16 bytes, main.o(.text.isSigOK))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = isSigOK &rArr; GetStatus &rArr; Get_REG &rArr; I2C_Restart &rArr; I2C_Start &rArr; I2C_WriteByte &rArr; gpio_input_bit_get
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStatus
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchAllCH
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchCH
</UL>

<P><STRONG><a name="[93]"></a>lcd_dma_callback</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, lcd.o(.text.lcd_dma_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lcd_dma_callback &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_Channel4_IRQHandler
</UL>

<P><STRONG><a name="[171]"></a>lcd_dma_init</STRONG> (Thumb, 160 bytes, Stack size 56 bytes, lcd.o(.text.lcd_dma_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lcd_dma_init &rArr; dma_interrupt_enable &rArr; dma_periph_and_channel_check
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_interrupt_enable
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_interrupt_flag_clear
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_memory_to_memory_disable
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_circulation_disable
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_init
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_struct_para_init
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c7]"></a>lcd_set_cursor</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lcd.o(.text.lcd_set_cursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = lcd_set_cursor &rArr; lcd_write_cmd &rArr; gpio_bit_write
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_update
</UL>

<P><STRONG><a name="[9f]"></a>lcd_set_window</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, lcd.o(.text.lcd_set_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = lcd_set_window &rArr; lcd_write_cmd &rArr; gpio_bit_write
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_update
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispFill
</UL>

<P><STRONG><a name="[e7]"></a>lcd_update</STRONG> (Thumb, 620 bytes, Stack size 64 bytes, lcd.o(.text.lcd_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = lcd_update &rArr; lcd_set_window &rArr; lcd_write_cmd &rArr; gpio_bit_write
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_transfer_number_config
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_memory_address_config
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_disable
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_enable
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_dma_enable
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_window
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_cursor
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Callback
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuDisplay
</UL>

<P><STRONG><a name="[9d]"></a>lcd_write_cmd</STRONG> (Thumb, 284 bytes, Stack size 40 bytes, lcd.o(.text.lcd_write_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = lcd_write_cmd &rArr; gpio_bit_write
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_write
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_flag_get
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_data_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispInverse
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispGreyLevel
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispContrast
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_update
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPixelOn
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispFill
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_window
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_cursor
</UL>

<P><STRONG><a name="[a0]"></a>lcd_write_multi_repeat</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, lcd.o(.text.lcd_write_multi_repeat))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lcd_write_multi_repeat &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_flag_get
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_data_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispFill
</UL>

<P><STRONG><a name="[167]"></a>lineDriverMode</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dirana3basicdsp.o(.text.lineDriverMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = lineDriverMode &rArr; Set_REGFree &rArr; I2C_Start &rArr; I2C_WriteByte &rArr; gpio_input_bit_get
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_REGFree
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initBasicControl
</UL>

<P><STRONG><a name="[46]"></a>main</STRONG> (Thumb, 2204 bytes, Stack size 400 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1112<LI>Call Chain = main &rArr; MenuMain &rArr; MenuAudio &rArr; UI_Audio &rArr; UI_DrawEq &rArr; UI_DrawEqBand &rArr; GUI_Float &rArr; GUI_Number &rArr; GUI_Char &rArr; GUI_DrawBuff &rArr; GUI_DrawDot
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_register_sync_wait
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_interrupt_enable
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_backup_write_enable
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_bit_get
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkp_read_data
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkp_write_data
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRDS
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getQPDAverPeak
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchBand
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMute
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDS_Init
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initQPD
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initQPDpara
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initGraphicSA
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initGraphicSApara
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initUltraBass
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSignalScaler
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunerInit
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_dma_init
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initKeyFuncPara
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initGraphicEQ
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTone
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initBasicControl
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunerStructInit
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_StructInit
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_init
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_set_alarm
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuMain
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_REG
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFMStereoImprovement
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setUltraBassGain
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setDCFilter
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBalance
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMainVol
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_OutVal
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddChannel
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoChannel
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Main
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchCH
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStatus
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMute
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VolumeHandler
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdjustFilter
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdjustFreq
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVolume
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flushKey
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChannels
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readSettings
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveSettings
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[180]"></a>myabs</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, func.o(.text.myabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = myabs
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myround
</UL>

<P><STRONG><a name="[67]"></a>myround</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, func.o(.text.myround))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = myround &rArr; myabs
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myabs
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Callback
</UL>

<P><STRONG><a name="[136]"></a>num2str</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, ui.o(.text.num2str))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = num2str &rArr; Judge_length
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_length
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Main
</UL>

<P><STRONG><a name="[72]"></a>nvic_irq_enable</STRONG> (Thumb, 296 bytes, Stack size 24 bytes, gd32f30x_misc.o(.text.nvic_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nvic_irq_enable &rArr; nvic_priority_group_set
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_priority_group_set
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_dma_init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_set_alarm
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Init
</UL>

<P><STRONG><a name="[10f]"></a>nvic_priority_group_set</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, gd32f30x_misc.o(.text.nvic_priority_group_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = nvic_priority_group_set
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[103]"></a>pmu_backup_write_enable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32f30x_pmu.o(.text.pmu_backup_write_enable))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[111]"></a>rcu_adc_clock_config</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, gd32f30x_rcu.o(.text.rcu_adc_clock_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rcu_adc_clock_config
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[146]"></a>rcu_bkp_reset_disable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32f30x_rcu.o(.text.rcu_bkp_reset_disable))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkp_deinit
</UL>

<P><STRONG><a name="[145]"></a>rcu_bkp_reset_enable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32f30x_rcu.o(.text.rcu_bkp_reset_enable))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkp_deinit
</UL>

<P><STRONG><a name="[124]"></a>rcu_clock_freq_get</STRONG> (Thumb, 494 bytes, Stack size 96 bytes, gd32f30x_rcu.o(.text.rcu_clock_freq_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = rcu_clock_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_config
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_baudrate_set
</UL>

<P><STRONG><a name="[181]"></a>rcu_flag_get</STRONG> (Thumb, 62 bytes, Stack size 4 bytes, gd32f30x_rcu.o(.text.rcu_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rcu_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_osci_stab_wait
</UL>

<P><STRONG><a name="[105]"></a>rcu_osci_on</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, gd32f30x_rcu.o(.text.rcu_osci_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rcu_osci_on
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[106]"></a>rcu_osci_stab_wait</STRONG> (Thumb, 574 bytes, Stack size 48 bytes, gd32f30x_rcu.o(.text.rcu_osci_stab_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = rcu_osci_stab_wait &rArr; rcu_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[ca]"></a>rcu_periph_clock_enable</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, gd32f30x_rcu.o(.text.rcu_periph_clock_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rcu_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_dma_init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_spi_init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SPI_Init
</UL>

<P><STRONG><a name="[144]"></a>rcu_periph_reset_disable</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, gd32f30x_rcu.o(.text.rcu_periph_reset_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_deinit
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_deinit
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_deinit
</UL>

<P><STRONG><a name="[143]"></a>rcu_periph_reset_enable</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, gd32f30x_rcu.o(.text.rcu_periph_reset_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rcu_periph_reset_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_deinit
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_deinit
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_deinit
</UL>

<P><STRONG><a name="[107]"></a>rcu_rtc_clock_config</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, gd32f30x_rcu.o(.text.rcu_rtc_clock_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rcu_rtc_clock_config
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[c4]"></a>reFillBackLightTimer</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, main.o(.text.reFillBackLightTimer))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Handler
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Callback
</UL>

<P><STRONG><a name="[178]"></a>readChannels</STRONG> (Thumb, 278 bytes, Stack size 16 bytes, main.o(.text.readChannels))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = readChannels &rArr; flash_read &rArr; flash_waitBusy &rArr; flash_readStatueReg &rArr; flash_readWriteByte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[177]"></a>readSettings</STRONG> (Thumb, 260 bytes, Stack size 40 bytes, main.o(.text.readSettings))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = readSettings &rArr; flash_read &rArr; flash_waitBusy &rArr; flash_readStatueReg &rArr; flash_readWriteByte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[182]"></a>rtc_alarm_config</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, gd32f30x_rtc.o(.text.rtc_alarm_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rtc_alarm_config
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_configuration_mode_exit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_configuration_mode_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_set_alarm
</UL>

<P><STRONG><a name="[183]"></a>rtc_configuration_mode_enter</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32f30x_rtc.o(.text.rtc_configuration_mode_enter))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_alarm_config
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_prescaler_set
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_counter_set
</UL>

<P><STRONG><a name="[184]"></a>rtc_configuration_mode_exit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32f30x_rtc.o(.text.rtc_configuration_mode_exit))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_alarm_config
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_prescaler_set
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_counter_set
</UL>

<P><STRONG><a name="[186]"></a>rtc_counter_get</STRONG> (Thumb, 42 bytes, Stack size 4 bytes, gd32f30x_rtc.o(.text.rtc_counter_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rtc_counter_get
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_get_time
</UL>

<P><STRONG><a name="[185]"></a>rtc_counter_set</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, gd32f30x_rtc.o(.text.rtc_counter_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rtc_counter_set
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_configuration_mode_exit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_configuration_mode_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_set_time
</UL>

<P><STRONG><a name="[fd]"></a>rtc_flag_clear</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, gd32f30x_rtc.o(.text.rtc_flag_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rtc_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_set_alarm
</UL>

<P><STRONG><a name="[fc]"></a>rtc_flag_get</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, gd32f30x_rtc.o(.text.rtc_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rtc_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[100]"></a>rtc_get_time</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, rtc.o(.text.rtc_get_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rtc_get_time &rArr; rtc_counter_get
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_counter_get
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_register_sync_wait
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_lwoff_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[109]"></a>rtc_interrupt_enable</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, gd32f30x_rtc.o(.text.rtc_interrupt_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rtc_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_set_alarm
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ff]"></a>rtc_lwoff_wait</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gd32f30x_rtc.o(.text.rtc_lwoff_wait))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_get_time
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_set_alarm
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_set_time
</UL>

<P><STRONG><a name="[10a]"></a>rtc_prescaler_set</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, gd32f30x_rtc.o(.text.rtc_prescaler_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rtc_prescaler_set
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_configuration_mode_exit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_configuration_mode_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[108]"></a>rtc_register_sync_wait</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, gd32f30x_rtc.o(.text.rtc_register_sync_wait))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_get_time
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[101]"></a>rtc_set_alarm</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, rtc.o(.text.rtc_set_alarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = rtc_set_alarm &rArr; nvic_irq_enable &rArr; nvic_priority_group_set
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_flag_clear
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_alarm_config
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_lwoff_wait
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_interrupt_enable
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10b]"></a>rtc_set_time</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, rtc.o(.text.rtc_set_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rtc_set_time &rArr; rtc_counter_set
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_counter_set
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_lwoff_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[79]"></a>saveChannels</STRONG> (Thumb, 274 bytes, Stack size 8 bytes, main.o(.text.saveChannels))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = saveChannels &rArr; flash_program_page &rArr; flash_waitBusy &rArr; flash_readStatueReg &rArr; flash_readWriteByte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_program_page
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuSearch
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddChannel
</UL>

<P><STRONG><a name="[df]"></a>saveSettings</STRONG> (Thumb, 284 bytes, Stack size 24 bytes, main.o(.text.saveSettings))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = saveSettings &rArr; flash_program &rArr; flash_program_page &rArr; flash_waitBusy &rArr; flash_readStatueReg &rArr; flash_readWriteByte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_program
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_program_page
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuDevice
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuSearch
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuRadio
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuAudio
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuDisplay
</UL>

<P><STRONG><a name="[d9]"></a>setBalance</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, dirana3basicdsp.o(.text.setBalance))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = setBalance &rArr; dataConv &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpge
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataConv
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_ADSP
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuAudio
</UL>

<P><STRONG><a name="[db]"></a>setDCFilter</STRONG> (Thumb, 288 bytes, Stack size 48 bytes, dirana3basicdsp.o(.text.setDCFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = setDCFilter &rArr; EasyProgramUpdateCoeff &rArr; WaitEasyProgram &rArr; Get_ADSP &rArr; I2C_Restart &rArr; I2C_Start &rArr; I2C_WriteByte &rArr; gpio_input_bit_get
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmple
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmplt
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EasyProgramUpdateCoeff
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataConv
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuAudio
</UL>

<P><STRONG><a name="[11c]"></a>setFader</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, dirana3basicdsp.o(.text.setFader))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = setFader &rArr; dataConv &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataConv
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_ADSP
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVolume
</UL>

<P><STRONG><a name="[dc]"></a>setGraphicEQ</STRONG> (Thumb, 816 bytes, Stack size 152 bytes, dirana3basicdsp.o(.text.setGraphicEQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = setGraphicEQ &rArr; EasyProgramUpdateCoeff &rArr; WaitEasyProgram &rArr; Get_ADSP &rArr; I2C_Restart &rArr; I2C_Start &rArr; I2C_WriteByte &rArr; gpio_input_bit_get
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setGraphicEQPreScal
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EasyProgramUpdateCoeff
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataConv
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initGraphicEQ
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuAudio
</UL>

<P><STRONG><a name="[18b]"></a>setGraphicEQPreScal</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, dirana3basicdsp.o(.text.setGraphicEQPreScal))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = setGraphicEQPreScal &rArr; dataConv &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataConv
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_ADSP
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setGraphicEQ
</UL>

<P><STRONG><a name="[16a]"></a>setGraphicSAGain</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, dirana3basicdsp.o(.text.setGraphicSAGain))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = setGraphicSAGain &rArr; dataConv &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataConv
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_ADSP
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initGraphicSA
</UL>

<P><STRONG><a name="[d8]"></a>setMainVol</STRONG> (Thumb, 536 bytes, Stack size 48 bytes, dirana3basicdsp.o(.text.setMainVol))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = setMainVol &rArr; dataConv &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmplt
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataConv
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_ADSP_multi
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuAudio
</UL>

<P><STRONG><a name="[119]"></a>setMute</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, dirana3basicdsp.o(.text.setMute))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = setMute &rArr; Set_ADSP_multi &rArr; I2C_Start &rArr; I2C_WriteByte &rArr; gpio_input_bit_get
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_ADSP_multi
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_ADSP
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchBand
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMute
</UL>

<P><STRONG><a name="[dd]"></a>setTone</STRONG> (Thumb, 1960 bytes, Stack size 208 bytes, dirana3basicdsp.o(.text.setTone))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = setTone &rArr; EasyProgramUpdateCoeff &rArr; WaitEasyProgram &rArr; Get_ADSP &rArr; I2C_Restart &rArr; I2C_Start &rArr; I2C_WriteByte &rArr; gpio_input_bit_get
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTonePreScal
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EasyProgramUpdateCoeff
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataConv
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTone
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuAudio
</UL>

<P><STRONG><a name="[18c]"></a>setTonePreScal</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, dirana3basicdsp.o(.text.setTonePreScal))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = setTonePreScal &rArr; dataConv &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataConv
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_ADSP
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTone
</UL>

<P><STRONG><a name="[de]"></a>setUltraBassGain</STRONG> (Thumb, 272 bytes, Stack size 48 bytes, dirana3basicdsp.o(.text.setUltraBassGain))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = setUltraBassGain &rArr; dataConv &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataConv
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_ADSP
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuAudio
</UL>

<P><STRONG><a name="[cf]"></a>spi_bidirectional_transfer_config</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, gd32f30x_spi.o(.text.spi_bidirectional_transfer_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spi_bidirectional_transfer_config
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SPI_Init
</UL>

<P><STRONG><a name="[173]"></a>spi_dma_enable</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, gd32f30x_spi.o(.text.spi_dma_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spi_dma_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_update
</UL>

<P><STRONG><a name="[d0]"></a>spi_enable</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, gd32f30x_spi.o(.text.spi_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = spi_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_spi_init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SPI_Init
</UL>

<P><STRONG><a name="[162]"></a>spi_i2s_data_receive</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, gd32f30x_spi.o(.text.spi_i2s_data_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = spi_i2s_data_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_readWriteByte
</UL>

<P><STRONG><a name="[161]"></a>spi_i2s_data_transmit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gd32f30x_spi.o(.text.spi_i2s_data_transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spi_i2s_data_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_readWriteByte
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_multi_repeat
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_cmd
</UL>

<P><STRONG><a name="[cc]"></a>spi_i2s_deinit</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, gd32f30x_spi.o(.text.spi_i2s_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = spi_i2s_deinit &rArr; rcu_periph_reset_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_spi_init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SPI_Init
</UL>

<P><STRONG><a name="[160]"></a>spi_i2s_flag_get</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, gd32f30x_spi.o(.text.spi_i2s_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = spi_i2s_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_dma_callback
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_readWriteByte
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_multi_repeat
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_cmd
</UL>

<P><STRONG><a name="[cd]"></a>spi_init</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, gd32f30x_spi.o(.text.spi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = spi_init
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_spi_init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SPI_Init
</UL>

<P><STRONG><a name="[ce]"></a>spi_nss_output_disable</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, gd32f30x_spi.o(.text.spi_nss_output_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = spi_nss_output_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_spi_init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SPI_Init
</UL>

<P><STRONG><a name="[cb]"></a>spi_struct_para_init</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, gd32f30x_spi.o(.text.spi_struct_para_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = spi_struct_para_init
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_spi_init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SPI_Init
</UL>

<P><STRONG><a name="[18e]"></a>systick_clksource_set</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, gd32f30x_misc.o(.text.systick_clksource_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = systick_clksource_set
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_config
</UL>

<P><STRONG><a name="[110]"></a>systick_config</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, systick.o(.text.systick_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = systick_config &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_clksource_set
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_clock_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[126]"></a>timer_deinit</STRONG> (Thumb, 280 bytes, Stack size 48 bytes, gd32f30x_timer.o(.text.timer_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = timer_deinit &rArr; rcu_periph_reset_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Init
</UL>

<P><STRONG><a name="[17f]"></a>timer_enable</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, gd32f30x_timer.o(.text.timer_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = timer_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[127]"></a>timer_init</STRONG> (Thumb, 260 bytes, Stack size 8 bytes, gd32f30x_timer.o(.text.timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Init
</UL>

<P><STRONG><a name="[128]"></a>timer_interrupt_enable</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gd32f30x_timer.o(.text.timer_interrupt_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Init
</UL>

<P><STRONG><a name="[122]"></a>timer_interrupt_flag_clear</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gd32f30x_timer.o(.text.timer_interrupt_flag_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_interrupt_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Callback
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Init
</UL>

<P><STRONG><a name="[11f]"></a>timer_interrupt_flag_get</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, gd32f30x_timer.o(.text.timer_interrupt_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = timer_interrupt_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER6_IRQHandler
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER5_IRQHandler
</UL>

<P><STRONG><a name="[125]"></a>timer_struct_para_init</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, gd32f30x_timer.o(.text.timer_struct_para_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = timer_struct_para_init
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Init
</UL>

<P><STRONG><a name="[13a]"></a>usart_baudrate_set</STRONG> (Thumb, 202 bytes, Stack size 40 bytes, gd32f30x_usart.o(.text.usart_baudrate_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_clock_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[163]"></a>usart_data_transmit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gd32f30x_usart.o(.text.usart_data_transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_data_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[139]"></a>usart_deinit</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, gd32f30x_usart.o(.text.usart_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = usart_deinit &rArr; rcu_periph_reset_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[142]"></a>usart_enable</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, gd32f30x_usart.o(.text.usart_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = usart_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[164]"></a>usart_flag_get</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, gd32f30x_usart.o(.text.usart_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = usart_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[13f]"></a>usart_hardware_flow_cts_config</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, gd32f30x_usart.o(.text.usart_hardware_flow_cts_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = usart_hardware_flow_cts_config
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[13e]"></a>usart_hardware_flow_rts_config</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, gd32f30x_usart.o(.text.usart_hardware_flow_rts_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = usart_hardware_flow_rts_config
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[13d]"></a>usart_parity_config</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gd32f30x_usart.o(.text.usart_parity_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_parity_config
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[140]"></a>usart_receive_config</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, gd32f30x_usart.o(.text.usart_receive_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = usart_receive_config
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[13c]"></a>usart_stop_bit_set</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gd32f30x_usart.o(.text.usart_stop_bit_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_stop_bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[141]"></a>usart_transmit_config</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, gd32f30x_usart.o(.text.usart_transmit_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = usart_transmit_config
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[13b]"></a>usart_word_length_set</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gd32f30x_usart.o(.text.usart_word_length_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_word_length_set
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[18f]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1ae]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[1af]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[1b0]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[e2]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuDevice
</UL>

<P><STRONG><a name="[197]"></a>__ARM_fpclassifyf</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fpclassifyf.o(i.__ARM_fpclassifyf))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>

<P><STRONG><a name="[16c]"></a>__hardfp_cosf</STRONG> (Thumb, 280 bytes, Stack size 8 bytes, cosf.o(i.__hardfp_cosf))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __hardfp_cosf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initGraphicSA
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTone
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setGraphicEQ
</UL>

<P><STRONG><a name="[16b]"></a>__hardfp_powf</STRONG> (Thumb, 1606 bytes, Stack size 32 bytes, powf.o(i.__hardfp_powf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __hardfp_powf
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_overflow
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan2
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_divzero
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee_status
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initQPD
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initGraphicSA
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSignalScaler
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setUltraBassGain
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTone
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setGraphicEQ
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBalance
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMainVol
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setGraphicSAGain
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setGraphicEQPreScal
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTonePreScal
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setFader
</UL>

<P><STRONG><a name="[1b1]"></a>__mathlib_powf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, powf.o(i.__hardfp_powf), UNUSED)

<P><STRONG><a name="[148]"></a>__hardfp_roundf</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, roundf.o(i.__hardfp_roundf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __hardfp_roundf &rArr; _frnd
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataConv
</UL>

<P><STRONG><a name="[18a]"></a>__hardfp_tanf</STRONG> (Thumb, 322 bytes, Stack size 16 bytes, tanf.o(i.__hardfp_tanf))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __hardfp_tanf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTone
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setDCFilter
</UL>

<P><STRONG><a name="[19a]"></a>__mathlib_flt_divzero</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_divzero))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>

<P><STRONG><a name="[194]"></a>__mathlib_flt_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>

<P><STRONG><a name="[199]"></a>__mathlib_flt_infnan2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan2))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>

<P><STRONG><a name="[193]"></a>__mathlib_flt_invalid</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>

<P><STRONG><a name="[196]"></a>__mathlib_flt_overflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_overflow))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>

<P><STRONG><a name="[198]"></a>__mathlib_flt_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_underflow))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>

<P><STRONG><a name="[191]"></a>__mathlib_rredf2</STRONG> (Thumb, 316 bytes, Stack size 20 bytes, rredf.o(i.__mathlib_rredf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __mathlib_rredf2
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>

<P><STRONG><a name="[1b2]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1b3]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1b4]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[192]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[14b]"></a>dma_periph_and_channel_check</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, gd32f30x_dma.o(.text.dma_periph_and_channel_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dma_periph_and_channel_check
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_interrupt_enable
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_transfer_number_config
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_memory_address_config
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_disable
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_enable
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_memory_to_memory_disable
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_circulation_disable
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_init
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_deinit
</UL>

<P><STRONG><a name="[11e]"></a>system_clock_config</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_gd32f30x.o(.text.system_clock_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = system_clock_config &rArr; system_clock_120m_irc8m
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_120m_irc8m
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[18d]"></a>system_clock_120m_irc8m</STRONG> (Thumb, 354 bytes, Stack size 16 bytes, system_gd32f30x.o(.text.system_clock_120m_irc8m))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = system_clock_120m_irc8m
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[e4]"></a>NVIC_SystemReset</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, main.o(.text.NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuDevice
</UL>

<P><STRONG><a name="[fb]"></a>FillStr</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, rds.o(.text.FillStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FillStr
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDS_Init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDS_Refresh
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRT
</UL>

<P><STRONG><a name="[10c]"></a>CheckVersionType</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, rds.o(.text.CheckVersionType))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CheckVersionType
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRT
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPI
</UL>

<P><STRONG><a name="[98]"></a>CheckError</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, rds.o(.text.CheckError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CheckError
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeRDS
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRT
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPS
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPI
</UL>

<P><STRONG><a name="[99]"></a>CheckGroupType</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, rds.o(.text.CheckGroupType))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CheckGroupType
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeRDS
</UL>

<P><STRONG><a name="[c3]"></a>I2C_Delay</STRONG> (Thumb, 58 bytes, Stack size 4 bytes, iic_sw.o(.text.I2C_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = I2C_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadByte
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Restart
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteByte
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
</UL>

<P><STRONG><a name="[147]"></a>dataConv</STRONG> (Thumb, 344 bytes, Stack size 24 bytes, dirana3basicdsp.o(.text.dataConv))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = dataConv &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_roundf
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;min
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initQPD
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initGraphicSA
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSignalScaler
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setUltraBassGain
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTone
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setGraphicEQ
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setDCFilter
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBalance
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMainVol
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setGraphicSAGain
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setGraphicEQPreScal
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTonePreScal
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setFader
</UL>

<P><STRONG><a name="[149]"></a>min</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, dirana3basicdsp.o(.text.min))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = min
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataConv
</UL>

<P><STRONG><a name="[19b]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[190]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[19e]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[19d]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
